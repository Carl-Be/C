; Listing generated by Microsoft (R) Optimizing Compiler Version 19.25.28614.0 

	TITLE	C:\Users\bechi\OneDrive\Desktop\pima\Fall_2020_We_Made_It!\C\C\HW_Asgmts\VS_Solutions\Bechie_Carl_Asgmnt_6\Bechie_Carl_Pg274_Ex9.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__F66CEB67_corecrt_stdio_config@h DB 01H
__101834BA_corecrt_wstdio@h DB 01H
__AD6A91B7_stdio@h DB 01H
__08EDCDA6_Bechie_Carl_Pg274_Ex9@c DB 01H
msvcjmc	ENDS
PUBLIC	___local_stdio_printf_options
PUBLIC	__vfprintf_l
PUBLIC	_printf
PUBLIC	_inner_product
PUBLIC	_main
PUBLIC	__JustMyCode_Default
PUBLIC	??_C@_0BI@MJJIBFHC@arrays_summed?5?$DN?5?$CF?42f?5?6?6@ ; `string'
PUBLIC	__real@4000000000000000
PUBLIC	__real@4008000000000000
PUBLIC	__real@401c000000000000
EXTRN	__imp____acrt_iob_func:PROC
EXTRN	__imp____stdio_common_vfprintf:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
_DATA	SEGMENT
COMM	?_OptionsStorage@?1??__local_stdio_printf_options@@9@9:QWORD							; `__local_stdio_printf_options'::`2'::_OptionsStorage
_DATA	ENDS
;	COMDAT __real@401c000000000000
CONST	SEGMENT
__real@401c000000000000 DQ 0401c000000000000r	; 7
CONST	ENDS
;	COMDAT __real@4008000000000000
CONST	SEGMENT
__real@4008000000000000 DQ 04008000000000000r	; 3
CONST	ENDS
;	COMDAT __real@4000000000000000
CONST	SEGMENT
__real@4000000000000000 DQ 04000000000000000r	; 2
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_0BI@MJJIBFHC@arrays_summed?5?$DN?5?$CF?42f?5?6?6@
CONST	SEGMENT
??_C@_0BI@MJJIBFHC@arrays_summed?5?$DN?5?$CF?42f?5?6?6@ DB 'arrays_summed'
	DB	' = %.2f ', 0aH, 0aH, 00H			; `string'
CONST	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	push	ebp
	mov	ebp, esp
	pop	ebp
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\bechi\OneDrive\Desktop\pima\Fall_2020_We_Made_It!\C\C\HW_Asgmts\VS_Solutions\Bechie_Carl_Asgmnt_6\Bechie_Carl_Pg274_Ex9.c
;	COMDAT _main
_TEXT	SEGMENT
_arrays_summed_product$ = -80				; size = 8
_b$ = -64						; size = 24
_a$ = -32						; size = 24
__$ArrayPad$ = -4					; size = 4
_main	PROC						; COMDAT

; 73   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 276				; 00000114H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-276]
	mov	ecx, 69					; 00000045H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __08EDCDA6_Bechie_Carl_Pg274_Ex9@c
	call	@__CheckForDebuggerJustMyCode@4

; 74   :     /*initialize arrays*/
; 75   :     const double a[N] = {2, 3, 7}; 

	movsd	xmm0, QWORD PTR __real@4000000000000000
	movsd	QWORD PTR _a$[ebp], xmm0
	movsd	xmm0, QWORD PTR __real@4008000000000000
	movsd	QWORD PTR _a$[ebp+8], xmm0
	movsd	xmm0, QWORD PTR __real@401c000000000000
	movsd	QWORD PTR _a$[ebp+16], xmm0

; 76   :     const double b[N] = {2, 3, 7};

	movsd	xmm0, QWORD PTR __real@4000000000000000
	movsd	QWORD PTR _b$[ebp], xmm0
	movsd	xmm0, QWORD PTR __real@4008000000000000
	movsd	QWORD PTR _b$[ebp+8], xmm0
	movsd	xmm0, QWORD PTR __real@401c000000000000
	movsd	QWORD PTR _b$[ebp+16], xmm0

; 77   : 
; 78   :     /*do arithmetic on arrays*/
; 79   :     double arrays_summed_product = inner_product(&a, &b, N);

	push	3
	lea	eax, DWORD PTR _b$[ebp]
	push	eax
	lea	ecx, DWORD PTR _a$[ebp]
	push	ecx
	call	_inner_product
	add	esp, 12					; 0000000cH
	fstp	QWORD PTR _arrays_summed_product$[ebp]

; 80   :   
; 81   :     /*display results*/
; 82   :     printf("arrays_summed = %.2f \n\n", arrays_summed_product);

	sub	esp, 8
	movsd	xmm0, QWORD PTR _arrays_summed_product$[ebp]
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_0BI@MJJIBFHC@arrays_summed?5?$DN?5?$CF?42f?5?6?6@
	call	_printf
	add	esp, 12					; 0000000cH

; 83   : 
; 84   :     return 0; /*Terminate program with normal status code*/

	xor	eax, eax

; 85   : 
; 86   : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@main
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 276				; 00000114H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN6@main:
	DD	2
	DD	$LN5@main
$LN5@main:
	DD	-32					; ffffffe0H
	DD	24					; 00000018H
	DD	$LN3@main
	DD	-64					; ffffffc0H
	DD	24					; 00000018H
	DD	$LN4@main
$LN4@main:
	DB	98					; 00000062H
	DB	0
$LN3@main:
	DB	97					; 00000061H
	DB	0
_main	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\bechi\OneDrive\Desktop\pima\Fall_2020_We_Made_It!\C\C\HW_Asgmts\VS_Solutions\Bechie_Carl_Asgmnt_6\Bechie_Carl_Pg274_Ex9.c
;	COMDAT _inner_product
_TEXT	SEGMENT
_b_pointer$ = -36					; size = 4
_a_pointer$ = -24					; size = 4
_sum_of_products$ = -12					; size = 8
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_n$ = 16						; size = 4
_inner_product PROC					; COMDAT

; 110  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __08EDCDA6_Bechie_Carl_Pg274_Ex9@c
	call	@__CheckForDebuggerJustMyCode@4

; 111  : 
; 112  :     double sum_of_products = 0.0;/*Holds the sum of the products*/

	xorps	xmm0, xmm0
	movsd	QWORD PTR _sum_of_products$[ebp], xmm0

; 113  :     const double* a_pointer = a;/*Point a_pointer at a starting memory location*/

	mov	eax, DWORD PTR _a$[ebp]
	mov	DWORD PTR _a_pointer$[ebp], eax

; 114  :     const double* b_pointer = b;/*Point b_pointer at b starting memory location*/

	mov	eax, DWORD PTR _b$[ebp]
	mov	DWORD PTR _b_pointer$[ebp], eax
$LN2@inner_prod:

; 115  : 
; 116  :     for(a_pointer; a_pointer < a + n;)/*a_pointer is incremented below for readability*/

	mov	eax, DWORD PTR _n$[ebp]
	mov	ecx, DWORD PTR _a$[ebp]
	lea	edx, DWORD PTR [ecx+eax*8]
	cmp	DWORD PTR _a_pointer$[ebp], edx
	jae	SHORT $LN3@inner_prod

; 117  :     {
; 118  :        
; 119  :         sum_of_products += *a_pointer++ * *b_pointer++; /*Increment through the arrays one index at a time*/

	mov	eax, DWORD PTR _a_pointer$[ebp]
	mov	ecx, DWORD PTR _b_pointer$[ebp]
	movsd	xmm0, QWORD PTR [eax]
	mulsd	xmm0, QWORD PTR [ecx]
	addsd	xmm0, QWORD PTR _sum_of_products$[ebp]
	movsd	QWORD PTR _sum_of_products$[ebp], xmm0
	mov	edx, DWORD PTR _b_pointer$[ebp]
	add	edx, 8
	mov	DWORD PTR _b_pointer$[ebp], edx
	mov	eax, DWORD PTR _a_pointer$[ebp]
	add	eax, 8
	mov	DWORD PTR _a_pointer$[ebp], eax

; 120  :     }

	jmp	SHORT $LN2@inner_prod
$LN3@inner_prod:

; 121  : 
; 122  :     return sum_of_products;

	fld	QWORD PTR _sum_of_products$[ebp]

; 123  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 232				; 000000e8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_inner_product ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\stdio.h
;	COMDAT _printf
_TEXT	SEGMENT
__ArgList$ = -20					; size = 4
__Result$ = -8						; size = 4
__Format$ = 8						; size = 4
_printf	PROC						; COMDAT

; 954  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __AD6A91B7_stdio@h
	call	@__CheckForDebuggerJustMyCode@4

; 955  :         int _Result;
; 956  :         va_list _ArgList;
; 957  :         __crt_va_start(_ArgList, _Format);

	lea	eax, DWORD PTR __Format$[ebp+4]
	mov	DWORD PTR __ArgList$[ebp], eax

; 958  :         _Result = _vfprintf_l(stdout, _Format, NULL, _ArgList);

	mov	eax, DWORD PTR __ArgList$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR __Format$[ebp]
	push	ecx
	mov	esi, esp
	push	1
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	__vfprintf_l
	add	esp, 16					; 00000010H
	mov	DWORD PTR __Result$[ebp], eax

; 959  :         __crt_va_end(_ArgList);

	mov	DWORD PTR __ArgList$[ebp], 0

; 960  :         return _Result;

	mov	eax, DWORD PTR __Result$[ebp]

; 961  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_printf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\stdio.h
;	COMDAT __vfprintf_l
_TEXT	SEGMENT
__Stream$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vfprintf_l PROC					; COMDAT

; 642  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __AD6A91B7_stdio@h
	call	@__CheckForDebuggerJustMyCode@4

; 643  :         return __stdio_common_vfprintf(_CRT_INTERNAL_LOCAL_PRINTF_OPTIONS, _Stream, _Format, _Locale, _ArgList);

	mov	esi, esp
	mov	eax, DWORD PTR __ArgList$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Locale$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Format$[ebp]
	push	edx
	mov	eax, DWORD PTR __Stream$[ebp]
	push	eax
	call	___local_stdio_printf_options
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	call	DWORD PTR __imp____stdio_common_vfprintf
	add	esp, 24					; 00000018H
	cmp	esi, esp
	call	__RTC_CheckEsp

; 644  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__vfprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 86   :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __F66CEB67_corecrt_stdio_config@h
	call	@__CheckForDebuggerJustMyCode@4

; 87   :         static unsigned __int64 _OptionsStorage;
; 88   :         return &_OptionsStorage;

	mov	eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@9 ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 89   :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
___local_stdio_printf_options ENDP
_TEXT	ENDS
END
